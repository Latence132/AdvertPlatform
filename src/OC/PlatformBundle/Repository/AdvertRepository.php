<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll()
    {
        // Méthode 1 : en passant par l'EntityManager
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('a')
            ->from($this->_entityName, 'a')
            ;
        // Dans un repository, $this->_entityName est le namespace de l'entité gérée
        // Ici, il vaut donc OC\PlatformBundle\Entity\Advert

        // Méthode 2 : en passant par le raccourci (je recommande)
        $queryBuilder = $this->createQueryBuilder('a');

        // On n'ajoute pas de critère ou tri particulier, la construction
        // de notre requête est finie

        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();

        // On récupère les résultats à partir de la Query
        $results = $query->getResult();

        // On retourne ces résultats
        return $results;
    }

    public function myFindAll2()
    {
        //equivalent a myFindAll()
        return $this
            ->createQueryBuilder('a')
            ->getQuery()
            ->getResult()
            ;
    }

    public function myFindOne($id)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.id = :id')
            ->setParameter('id', $id)
            ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function findByAuthorAndDate($author, $year)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.author = :author')
            ->setParameter('author', $author)
            ->andWhere('a.date < :year')
            ->setParameter('year', $year)
            ->orderBy('a.date', 'DESC')
            ;

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
            ->setParameter('end',   new \Datetime(date('Y').'-12-31'))  // Et le 31 décembre de cette année
            ;
    }

    public function myFind()
    {
        $qb = $this->createQueryBuilder('a');

        // On peut ajouter ce qu'on veut avant
        $qb
            ->where('a.author = :author')
            ->setParameter('author', 'Marine')
            ;

        // On applique notre condition sur le QueryBuilder
        $this->whereCurrentYear($qb);

        // On peut ajouter ce qu'on veut après
        $qb->orderBy('a.date', 'DESC');

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function myFindAllDQL()
    {
        $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a');
        $results = $query->getResult();

        return $results;
    }

    public function myFindDQL($id)
    {
        $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a WHERE a.id = :id');
        $query->setParameter('id', $id);

        // Utilisation de getSingleResult car la requête ne doit retourner qu'un seul résultat
        return $query->getSingleResult();
    }

    public function getAdvertWithApplications()
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.applications', 'app')
            ->addSelect('app')
            ;

        //exemple de jointure avec les conditions 
        //$qb->innerJoin('a.applications', 'app', 'WITH', 'YEAR(app.date) > 2013')

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

    public function getAdvertWithCategories(array $categoryNames)
    {
        /*$qb = $this
	    ->createQueryBuilder('a')
	    ->leftJoin('a.category', 'c')
	    ->where('c.name = :categoryNames')
	    ->setParameter('categoryNames')
	    ->addSelect('c')
	  	;

	  	return $qb
	    ->getQuery()
	    ->getResult()
	  	;*/

        //correction
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
            ->innerJoin('a.categories', 'c')
            ->addSelect('c')
            ;

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
            ->getQuery()
            ->getResult()
            ;

        /*Comme je l'ai dit précédemment, cette fonction va retourner un tableau d'Advert. Qu'est-ce que l'on veut en faire ? Les afficher. Donc la première chose à faire est de passer ce tableau à Twig. Ensuite, dans Twig, vous faites un simple{% for %}pour afficher ces annonces. Ce n'est vraiment pas compliqué à utiliser !*/
    }

    public function getAdverts($page, $nbPerPage){

        $query = $this->createQueryBuilder('a')
            ->addSelect('a')
            // Jointure sur l'attribut image
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            // Jointure sur l'attribut categories
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')

            //le order by fait foirer l requête avec le paginator
            //->orderBy('a.date', 'DESC')
            ->getQuery()
            ;

        $query
            // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage)
            ;

        // Enfin, on retourne l'objet Paginator correspondant à la requête construite
        // (n'oubliez pas le use correspondant en début de fichier)
        return new Paginator($query, true);
    }

    public function getAdvert($id){

        $query = $this->createQueryBuilder('a')
            ->where('a.id = :id')
            ->setParameter('id')
            // Jointure sur l'attribut image
            ->leftJoin('a.image', 'i')
            ->addSelect('i')
            // Jointure sur l'attribut categories
            ->leftJoin('a.categories', 'c')
            ->addSelect('c')
            ->getQuery()
            ;

        return $query->getQuery()->getResult();
    }

    public function menu($limit){
        $qb = $this->createQueryBuilder('a');
        $qb->orderBy('a.date', 'DESC');
        $qb->setMaxResults($limit);

        return $qb
            ->getQuery()
            ->getResult()
            ;

    }

    public function getAdvertWithoutApplication($days)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.nbApplications = :nb_applications')
            ->setParameter('nb_applications', 0)
            ;

        $this->purgeDays($qb, $days);

        return $qb
            ->getQuery()
            ->getResult()
            ;

    }

    protected function purgeDays(QueryBuilder $qb,$days)
    {
        $qb
            ->andWhere("a.date <= DATE_SUB(CURRENT_DATE(),:days, 'day')")
            ->setParameter('days', $days)
            ;
    }




}
